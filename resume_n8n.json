{
  "name": "resume",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "<CREDENTIAL_OR_ID>",
          "mode": "list"
        },
        "event": "fileCreated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -1040,
        320
      ],
      "id": "<RESOURCE_ID>",
      "name": "New Resume Uploaded (Google Drive)",
      "credentials": {
        "__REDACTED__": true
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id || $json.fileId || $json.resourceId }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -816,
        320
      ],
      "id": "<RESOURCE_ID>",
      "name": "Download Resume File (from Drive)",
      "credentials": {
        "__REDACTED__": true
      }
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/tmp/{{ $binary.data.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -592,
        320
      ],
      "id": "<RESOURCE_ID>",
      "name": "Save Resume to Disk"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -368,
        320
      ],
      "id": "<RESOURCE_ID>",
      "name": "Loop: Process Each Resume"
    },
    {
      "parameters": {
        "command": "=python -c \"import sys, os, json; os.environ.setdefault('TYPHOON_OCR_API_KEY', os.environ.get('TYPHOON_OCR_API_KEY','')); from typhoon_ocr import ocr_document; input_path = '/tmp/{{ $binary.data.fileName }}'; text = ocr_document(input_path); print(json.dumps({'ocr_text': text}, ensure_ascii=False))\"\n"
      },
      "id": "<RESOURCE_ID>",
      "name": "OCR: Extract Text from Resume (Typhoon OCR)",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        -128,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"candidate\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"email\": { \"type\": \"string\" },\n        \"links\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }\n      },\n      \"required\": [\"name\", \"email\", \"links\"],\n      \"additionalProperties\": false\n    },\n    \"education\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"degree\": { \"type\": \"string\" },\n          \"field\": { \"type\": \"string\" },\n          \"institution\": { \"type\": \"string\" },\n          \"graduation_year\": { \"type\": \"string\" },\n          \"evidence\": { \"type\": \"string\" }\n        },\n        \"required\": [\"degree\", \"field\", \"institution\", \"graduation_year\", \"evidence\"],\n        \"additionalProperties\": false\n      }\n    },\n    \"experience\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"role\": { \"type\": \"string\" },\n          \"organization\": { \"type\": \"string\" },\n          \"duration\": { \"type\": \"string\" },\n          \"period\": { \"type\": \"string\" },\n          \"highlights\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n          \"evidence\": { \"type\": \"string\" }\n        },\n        \"required\": [\"role\", \"organization\", \"highlights\", \"evidence\"],\n        \"additionalProperties\": false\n      }\n    },\n    \"skills\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"technical\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"soft\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }\n      },\n      \"required\": [\"technical\", \"soft\"],\n      \"additionalProperties\": false\n    },\n    \"knowledge\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"tools\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"matches\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"responsibilities\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"item\": { \"type\": \"string\" },\n              \"match_level\": { \"type\": \"string\", \"enum\": [\"present\", \"partial\", \"missing\"] },\n              \"evidence\": { \"type\": \"string\" },\n              \"confidence\": { \"type\": \"number\", \"minimum\": 0, \"maximum\": 1 }\n            },\n            \"required\": [\"item\", \"match_level\", \"evidence\", \"confidence\"],\n            \"additionalProperties\": false\n          }\n        },\n        \"qualifications\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"item\": { \"type\": \"string\" },\n              \"match_level\": { \"type\": \"string\", \"enum\": [\"present\", \"partial\", \"missing\"] },\n              \"evidence\": { \"type\": \"string\" },\n              \"confidence\": { \"type\": \"number\", \"minimum\": 0, \"maximum\": 1 }\n            },\n            \"required\": [\"item\", \"match_level\", \"evidence\", \"confidence\"],\n            \"additionalProperties\": false\n          }\n        }\n      },\n      \"required\": [\"responsibilities\", \"qualifications\"],\n      \"additionalProperties\": false\n    },\n    \"notes\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"strengths\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"gaps\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"recommendations\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }\n      },\n      \"required\": [\"strengths\", \"gaps\", \"recommendations\"],\n      \"additionalProperties\": false\n    },\n    \"RESULT\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"point\": { \"type\": \"integer\", \"minimum\": 0, \"maximum\": 100 },\n        \"reason\": { \"type\": \"string\" }\n      },\n      \"required\": [\"name\", \"point\", \"reason\"],\n      \"additionalProperties\": false\n    }\n  },\n  \"required\": [\n    \"candidate\",\n    \"education\",\n    \"experience\",\n    \"skills\",\n    \"knowledge\",\n    \"tools\",\n    \"matches\",\n    \"notes\",\n    \"RESULT\"\n  ]\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        208,
        368
      ],
      "id": "<RESOURCE_ID>",
      "name": "Parser: Convert LLM Output to JSON"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.stdout }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=คุณคือผู้ช่วยวิเคราะห์ความตรงของเรซูเม่ต่อ JD สำหรับตำแหน่ง “AI & Data Solution Intern” ของบริษัทเทคฯ (โซลูชัน HR/การศึกษาโดยใช้ AI)\n\n## กติกาสำคัญ\n- วิเคราะห์จาก **OCR_TEXT เท่านั้น** ห้ามเดา/ห้ามฮัลลูซิเนต\n- ทุกการตัดสิน (present / partial / missing) ต้องมี **evidence** เป็นคำ/วลี/โปรเจกต์/เครื่องมือที่พบจริงใน OCR (คัดวลีสั้น ๆ)\n- ถ้าไม่พบให้ใส่ค่าว่าง \"\" หรือ [] ตามชนิดข้อมูล\n- **ต้องส่งออกเป็น JSON ออบเจกต์เดียว** และต้อง **สอดคล้องกับ JSON Schema ของ Structured Output Parser ที่ให้ไว้** (ห้ามมีคีย์เกิน)\n\n## JD (เกณฑ์อ้างอิง)\n### Responsibilities (matches.responsibilities: ครบทั้ง 6 ข้อ)\n1) เก็บ/เข้าใจความต้องการกับผู้ใช้/ธุรกิจ  \n2) ออกแบบ/พัฒนา/ปรับแต่ง prompt  \n3) ออกแบบโครงสร้าง/กระบวนงาน/การใช้งานของ AI application  \n4) ใช้ LLMs เพื่อพัฒนา AI application  \n5) ทดสอบ/ประเมินประสิทธิภาพของ AI application  \n6) ทำงานร่วมวิศวกรซอฟต์แวร์เพื่อนำขึ้นระบบจริง  \n\n### Qualifications (matches.qualifications: ครบทุกหัวข้อ)\n- Python, prompt engineering, context engineering  \n- คิดวิเคราะห์/แก้ปัญหา, สนใจ AI/automation/data-driven  \n- พื้นฐาน NLP และแนวคิด Machine Learning  \n- API, JSON, หรือ automation pipelines  \n- พิเศษ: n8n, SQL, Docker, Cloud  \n\n## คำอธิบายการตัดสิน\n- present = มีหลักฐานตรงตัว  \n- partial = กล่าวถึงใกล้เคียง/บางส่วน  \n- missing = ไม่พบหลักฐาน  \n- ต้องมี **confidence** (0–1, ปัดทศนิยม 2 ตำแหน่ง)  \n\n## Must-Have Checklist (ต้องพบ ≥ partial และบันทึกใน RESULT.reason)\n1) Python  \n2) Prompt engineering หรือการใช้ LLM (≥1 อย่าง)  \n3) อย่างน้อยหนึ่งใน API / JSON / automation pipeline  \n\n## การให้คะแนน (รวม 100)\nA) ทักษะหลัก 40 → Python 10, Prompt 12, Context/RAG 10, NLP/ML 8  \nB) ประสบการณ์ทำ AI/LLM App 30 → ใช้ LLM 10, โครงสร้าง/เวิร์กโฟลว์ 8, ทดสอบประเมิน 6, ทำงานร่วมทีม 6  \nC) เครื่องมือ/เทคโนโลยี 15 → API/JSON/Automation 5, n8n 4, SQL/Docker/Cloud 6  \nD) สอดคล้อง Responsibilities 15 → requirements 4, prompt 4, design 3, test 2, collaboration 2  \n\n**หลักการให้คะแนน**  \n- missing = 0  \n- partial ≈ ครึ่งน้ำหนัก  \n- present ≈ เต็มน้ำหนัก  \n- รวมและปัดเป็นจำนวนเต็ม 0–100 → ใส่ใน RESULT.point  \n\n## วิธีแมปข้อมูลเข้ากับ Schema\n- candidate: name, email, links (ไม่พบให้ \"\" หรือ [])  \n- education: degree, field, institution, graduation_year, evidence  \n- experience: role, organization, duration/period, highlights (array), evidence (หลายหลักฐานคั่น `; `)  \n- skills: technical[], soft[]  \n- knowledge[], tools[] (สิ่งที่พบจริง เช่น NLP, LangChain, SQL, Docker, GCP)  \n- matches: responsibilities (6 ข้อ), qualifications (ครบทุกหัวข้อ) → match_level, evidence, confidence  \n- notes: strengths, gaps, recommendations ตามหลักฐานจริง  \n- RESULT:  \n  - name = candidate.name  \n  - point = คะแนนรวม 0–100  \n  - reason = เหตุผลย่อ คั่น `;` เช่น \"มี Python; มี SQL; ไม่มี Docker; เคยเชื่อม LLM API\"  \n\n## รูปแบบ Output\n- ส่งออกเป็น **ออบเจกต์ JSON เดียว** (ไม่ใส่โค้ดบล็อก ไม่ใส่ข้อความอื่น)  \n- ค่าและข้อความทั้งหมดต้องเป็น **ภาษาไทย**  \n\n## OCR_TEXT\n\"\"\" {{ $json[\"stdout\"] }} \"\"\"\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        112,
        144
      ],
      "id": "<RESOURCE_ID>",
      "name": "LLM: Analyze Resume with JD"
    },
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "<VERTEX_AI_PROJECT_ID>",
          "mode": "id"
        },
        "modelName": "gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleVertex",
      "typeVersion": 1,
      "position": [
        80,
        368
      ],
      "id": "<RESOURCE_ID>",
      "name": "LLM Helper: Resume Scoring/Reasoning",
      "credentials": {
        "__REDACTED__": true
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "mode": "url",
          "value": "<CREDENTIAL_OR_ID>"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "reason": "={{ $json.output.RESULT.reason }}",
            "name": "={{ $json.output.RESULT.name }}",
            "point": "={{ $json.output.RESULT.point }}"
          },
          "matchingColumns": [
            "text"
          ],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "point",
              "displayName": "point",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "reason",
              "displayName": "reason",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "filename",
              "displayName": "filename",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "uploaddate",
              "displayName": "uploaddate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        576,
        320
      ],
      "id": "<RESOURCE_ID>",
      "name": "Save Results to Google Sheet (Append Row)",
      "credentials": {
        "__REDACTED__": true
      }
    },
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "<VERTEX_AI_PROJECT_ID>",
          "mode": "id"
        },
        "modelName": "gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleVertex",
      "typeVersion": 1,
      "position": [
        288,
        576
      ],
      "id": "<RESOURCE_ID>",
      "name": "LLM Helper: Additional Analysis",
      "credentials": {
        "__REDACTED__": true
      }
    }
  ],
  "pinData": {},
  "connections": {
    "New Resume Uploaded (Google Drive)": {
      "main": [
        [
          {
            "node": "Download Resume File (from Drive)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Resume File (from Drive)": {
      "main": [
        [
          {
            "node": "Save Resume to Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Resume to Disk": {
      "main": [
        [
          {
            "node": "Loop: Process Each Resume",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop: Process Each Resume": {
      "main": [
        [],
        [
          {
            "node": "OCR: Extract Text from Resume (Typhoon OCR)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OCR: Extract Text from Resume (Typhoon OCR)": {
      "main": [
        [
          {
            "node": "LLM: Analyze Resume with JD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parser: Convert LLM Output to JSON": {
      "ai_outputParser": [
        [
          {
            "node": "LLM: Analyze Resume with JD",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "LLM: Analyze Resume with JD": {
      "main": [
        [
          {
            "node": "Save Results to Google Sheet (Append Row)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Helper: Resume Scoring/Reasoning": {
      "ai_languageModel": [
        [
          {
            "node": "LLM: Analyze Resume with JD",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Save Results to Google Sheet (Append Row)": {
      "main": [
        [
          {
            "node": "Loop: Process Each Resume",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Helper: Additional Analysis": {
      "ai_languageModel": [
        [
          {
            "node": "Parser: Convert LLM Output to JSON",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "tags": []
}
